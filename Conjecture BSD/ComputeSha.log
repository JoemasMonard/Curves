

1 rank= [0, 0, 0, []] arank= 0 Sha= 1
2 rank= [0, 0, 0, []] arank= 0 Sha= 1
3 rank= [0, 0, 0, []] arank= 0 Sha= 1
4 rank= [0, 0, 0, []] arank= 0 Sha= 1
5 rank= [1, 1, 0, []] arank= 1 Sha= 1
6 rank= [1, 1, 0, []] arank= 1 Sha= 1
7 rank= [1, 1, 0, []] arank= 1 Sha= 1
8 rank= [0, 0, 0, []] arank= 0 Sha= 1
9 rank= [0, 0, 0, []] arank= 0 Sha= 1
10 rank= [0, 0, 0, []] arank= 0 Sha= 1
11 rank= [0, 0, 0, []] arank= 0 Sha= 1
12 rank= [0, 0, 0, []] arank= 0 Sha= 1
13 rank= [1, 1, 0, []] arank= 1 Sha= 1
14 rank= [1, 1, 0, []] arank= 1 Sha= 1
15 rank= [1, 1, 0, []] arank= 1 Sha= 1
16 rank= [0, 0, 0, []] arank= 0 Sha= 1
17 rank= [0, 0, 2, []] arank= 0 Sha= 4
18 rank= [0, 0, 0, []] arank= 0 Sha= 1
19 rank= [0, 0, 0, []] arank= 0 Sha= 1
20 rank= [1, 1, 0, []] arank= 1 Sha= 1
21 rank= [1, 1, 0, []] arank= 1 Sha= 1
22 rank= [1, 1, 0, []] arank= 1 Sha= 1
23 rank= [1, 1, 0, []] arank= 1 Sha= 1
24 rank= [1, 1, 0, []] arank= 1 Sha= 1
25 rank= [0, 0, 0, []] arank= 0 Sha= 1
26 rank= [0, 0, 0, []] arank= 0 Sha= 1
27 rank= [0, 0, 0, []] arank= 0 Sha= 1
28 rank= [1, 1, 0, []] arank= 1 Sha= 1
29 rank= [1, 1, 0, []] arank= 1 Sha= 1
30 rank= [1, 1, 0, []] arank= 1 Sha= 1
31 rank= [1, 1, 0, []] arank= 1 Sha= 1
32 rank= [0, 0, 0, []] arank= 0 Sha= 1
33 rank= [0, 0, 0, []] arank= 0 Sha= 1
34 rank= [2, 2, 0, []] arank= 2 Sha= 1
35 rank= [0, 0, 0, []] arank= 0 Sha= 1
36 rank= [0, 0, 0, []] arank= 0 Sha= 1
37 rank= [1, 1, 0, []] arank= 1 Sha= 1
38 rank= [1, 1, 0, []] arank= 1 Sha= 1
39 rank= [1, 1, 0, []] arank= 1 Sha= 1
40 rank= [0, 0, 0, []] arank= 0 Sha= 1
41 rank= [2, 2, 0, []] arank= 2 Sha= 1
42 rank= [0, 0, 0, []] arank= 0 Sha= 1
43 rank= [0, 0, 0, []] arank= 0 Sha= 9
44 rank= [0, 0, 0, []] arank= 0 Sha= 1
45 rank= [1, 1, 0, []] arank= 1 Sha= 1
46 rank= [1, 1, 0, []] arank= 1 Sha= 1
47 rank= [1, 1, 0, []] arank= 1 Sha= 1
48 rank= [0, 0, 0, []] arank= 0 Sha= 1
49 rank= [0, 0, 0, []] arank= 0 Sha= 1
50 rank= [0, 0, 0, []] arank= 0 Sha= 1
51 rank= [0, 0, 0, []] arank= 0 Sha= 1
52 rank= [1, 1, 0, []] arank= 1 Sha= 1
53 rank= [1, 1, 0, []] arank= 1 Sha= 1
54 rank= [1, 1, 0, []] arank= 1 Sha= 1
55 rank= [1, 1, 0, []] arank= 1 Sha= 1
56 rank= [1, 1, 0, []] arank= 1 Sha= 1
57 rank= [0, 0, 0, []] arank= 0 Sha= 1
58 rank= [0, 0, 0, []] arank= 0 Sha= 1
59 rank= [0, 0, 0, []] arank= 0 Sha= 1
60 rank= [1, 1, 0, []] arank= 1 Sha= 1
61 rank= [1, 1, 0, []] arank= 1 Sha= 1
62 rank= [1, 1, 0, []] arank= 1 Sha= 1
63 rank= [1, 1, 0, []] arank= 1 Sha= 1
64 rank= [0, 0, 0, []] arank= 0 Sha= 1
65 rank= [2, 2, 0, []] arank= 2 Sha= 1
66 rank= [0, 0, 0, []] arank= 0 Sha= 1
67 rank= [0, 0, 0, []] arank= 0 Sha= 1
68 rank= [0, 0, 2, []] arank= 0 Sha= 4
69 rank= [1, 1, 0, []] arank= 1 Sha= 1
70 rank= [1, 1, 0, []] arank= 1 Sha= 1
71 rank= [1, 1, 0, []] arank= 1 Sha= 1
72 rank= [0, 0, 0, []] arank= 0 Sha= 1
73 rank= [0, 0, 2, []] arank= 0 Sha= 4
74 rank= [0, 0, 0, []] arank= 0 Sha= 1
75 rank= [0, 0, 0, []] arank= 0 Sha= 1
76 rank= [0, 0, 0, []] arank= 0 Sha= 1
77 rank= [1, 1, 0, []] arank= 1 Sha= 1
78 rank= [1, 1, 0, []] arank= 1 Sha= 1
79 rank= [1, 1, 0, []] arank= 1 Sha= 1
80 rank= [1, 1, 0, []] arank= 1 Sha= 1
81 rank= [0, 0, 0, []] arank= 0 Sha= 1
82 rank= [0, 0, 2, []] arank= 0 Sha= 4
83 rank= [0, 0, 0, []] arank= 0 Sha= 1
84 rank= [1, 1, 0, []] arank= 1 Sha= 1
85 rank= [1, 1, 0, []] arank= 1 Sha= 1
86 rank= [1, 1, 0, []] arank= 1 Sha= 1
87 rank= [1, 1, 0, []] arank= 1 Sha= 1
88 rank= [1, 1, 0, []] arank= 1 Sha= 1
89 rank= [0, 0, 2, []] arank= 0 Sha= 4
90 rank= [0, 0, 0, []] arank= 0 Sha= 1
91 rank= [0, 0, 0, []] arank= 0 Sha= 1
92 rank= [1, 1, 0, []] arank= 1 Sha= 1
93 rank= [1, 1, 0, []] arank= 1 Sha= 1
94 rank= [1, 1, 0, []] arank= 1 Sha= 1
95 rank= [1, 1, 0, []] arank= 1 Sha= 1
96 rank= [1, 1, 0, []] arank= 1 Sha= 1
97 rank= [0, 0, 2, []] arank= 0 Sha= 4
98 rank= [0, 0, 0, []] arank= 0 Sha= 1
99 rank= [0, 0, 0, []] arank= 0 Sha= 1
100 rank= [0, 0, 0, []] arank= 0 Sha= 1


\\ PARIGP Script
{
for(n= 1,100,
   
   E = ellinit([-n^2,0]);if(#E<1,next);
   
   rp=ellratpoints(E,100*n);
   vr = ellrank(E,9,rp);if(#vr!=4,next);
   
   [ar,tmp] = ellanalyticrank(E);
   VP = vr[4];if(#VP != ar,next);
   
   bsd = ellbsd(E); 
   lfu = lfun(E,1,ar);
   MM  = ellheightmatrix(E,VP);
   regulator = matdet(MM);

   \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
   \\ BSD Conjecture:
   \\ lfu / r! = (bsd*regulator*Sha)
   \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
   
   SHA = lfu / ( (ar!) * bsd * regulator);
   SHA = round(SHA);
   
   vr[4]=[];
   printsep(" ",n,"rank=",vr,"arank=",ar,"Sha=",SHA);
   
   if(!issquare(SHA),break);
   );

}

  

